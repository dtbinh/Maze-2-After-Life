/* Author: Guangpeng Li
 * University of Liverpool
 * Date: 01/05/2015
 * 
 * The purpose of this class is to generate enemies
 * into the maze
 */
using UnityEngine;
using System.Collections.Generic;

public class EnemyGenerator : MonoBehaviour {
	// Minimum number of bots
	const int MIN_NUMBER_BOTS = 0;
	/* 
	 * Counter for adding extra bots
	 */
	public float newABotPerSecs;
	public float newSBotPerSecs;
	public float newDBotPerSecs;
	/* 
	 * Game object prefabs
	 */
	public Transform player;
	public GameObject AttackbotPrefab;
	public GameObject DefencebotPrefab;
	public GameObject SpeedbotPrefab;
	/*
	 * Minimum and maximum distances to generate
	 * the bots
	 */
	public int maxDisAtkBot;
	public int minDisAtkBot;
	public int maxDisSpdBot;
	public int minDisSpdBot;
	public int maxDisDefBot;
	public int minDisDefBot;
	public int maxDisPlayer;
	public int minDisPlayer;
	/*
	 * Maximum number of each bots allowd to generate
	 * in the maze
	 */
	int maxAddNumOfAtkBots;
	int maxAddNumOfDefBots;
	int maxAddNumOfSpdBots;
	int maxNumOfAtkBots;
	int maxNumOfDefBots;
	int maxNumOfSpdBots;
	int addNumOfAtkBots;
	int addNumOfDefBots;
	int addNumOfSpdBots;
	/* The Grid Map generated by the Grid Generator
	 */
	List<Vector3> gridMapPos;

	// Use this for initialization
	void Start () {
		maxNumOfAtkBots = GameMaster.maxNumberOfAttackBots;
		maxNumOfSpdBots = GameMaster.maxNumberOfSpeedBots;
		maxNumOfDefBots = GameMaster.maxNumberOfDefenceBots;
		maxAddNumOfAtkBots = GameMaster.maxAddNumOfAtkBots;
		maxAddNumOfDefBots = GameMaster.maxAddNumOfDefBots;
		maxAddNumOfSpdBots = GameMaster.maxAddNumOfSpdBots;
		// Adding extra bots over time
		InvokeRepeating("AddNewAtkBots", newABotPerSecs, newABotPerSecs);
		InvokeRepeating("AddNewSpdBots", newABotPerSecs, newABotPerSecs);
		InvokeRepeating("AddNewDefBots", newABotPerSecs, newABotPerSecs);
		gridMapPos = GridGenerator.gridMapWorldPosition;
	}
	
	// Update is called once per frame
	void Update () {
		if (PlayerHealth.isAlive) {
			InstantiateBots (maxNumOfAtkBots, AttackbotPrefab, minDisAtkBot, maxDisAtkBot, addNumOfAtkBots);
			//InstantiateBots (maxNumOfSpdBots, SpeedbotPrefab, minDisSpdBot, maxDisSpdBot, addNumOfSpdBots);
			InstantiateBots (maxNumOfDefBots, DefencebotPrefab, minDisDefBot, maxDisDefBot, addNumOfDefBots);
		}
	}
	/* 
	 * Instantiate Bots
	 * @maxNumber: the maximum number of bots
	 * @prefab: the bot's prefab
	 * @minDistance: the minimum distance from other other objects
	 * @maxDistance: the maximum distance from other objects
	 * @addNumOfBots: the additonal number of bots can be added
	 */
	void InstantiateBots(int maxNumber, GameObject prefab, int minDistance, int maxDistance, int addNumOfBots){
		// The current number of bots
		int currentNumber = GameObject.FindGameObjectsWithTag(prefab.tag).Length;
		// Ensure the number of bots never go below the minimum number
		currentNumber = (currentNumber < MIN_NUMBER_BOTS) ? MIN_NUMBER_BOTS : currentNumber;
		// Instantiate bots prefab
		if(currentNumber < maxNumber + addNumOfBots){
			Instantiate(prefab, RespawnSpot(minDistance, maxDistance, prefab.tag), Quaternion.identity);
		}
	}
	/*
	 * Increase the number of extra Attack bots
	 */
	void AddNewAtkBots(){
		addNumOfAtkBots++;
		if(addNumOfAtkBots >= maxAddNumOfAtkBots)
			CancelInvoke("AddNewAtkBots");
	}
	/*
	 * Increase the number of extra speed bots
	 */
	void AddNewSpdBots(){
		addNumOfSpdBots++;
		if(addNumOfSpdBots >= maxAddNumOfSpdBots)
			CancelInvoke("AddNewSpdBots");
	}
	/*
	 * Increase the number of extra defence bots
	 */
	void AddNewDefBots(){
		addNumOfDefBots++;
		if(addNumOfDefBots >= maxAddNumOfDefBots)
			CancelInvoke("AddNewDefBots");
	}


	/* 
	 * Generate a random location with the use of block grid map
	 * @minDistance: the minmum distance from other objects
	 * @maxDistance: the maxmum distance from other objects
	 * @enemy: the name of the bot
	 */
	Vector3 RespawnSpot(int minDistance, int maxDistance, string enemyTag){
		bool free;
		int randomIndex;
		GameObject[] bots = GameObject.FindGameObjectsWithTag(enemyTag);
		Vector3 pos;
		Vector3 enemyPos;
		do{
			free = true;
			randomIndex = Random.Range(0,gridMapPos.Count-1);
			enemyPos = gridMapPos[randomIndex];
			pos = (enemyTag=="SpeedBot")?enemyPos:new Vector3(enemyPos.x + Random.Range(-3,3), enemyPos.y, enemyPos.z + Random.Range(-3,3));
			// Check if bot is far enough from the player
			if(Vector3.Distance(player.position,pos) < Random.Range(minDisPlayer, maxDisPlayer)){
				free = false;
				continue;
			}
			// Check if bot is far enough from other bots
			foreach(GameObject go in bots){
				if(Vector3.Distance(go.transform.position, pos) < Random.Range(minDistance, maxDistance)){
					free = false;
					break;
				}
			}
		}while(!free);

		return pos;
	}
}
